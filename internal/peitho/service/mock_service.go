// Copyright 2021 Ke Fan <litesky@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tianrandailove/peitho/internal/peitho/service (interfaces: Service,ImageSrv,ContainerSrv)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Containers mocks base method.
func (m *MockService) Containers() ContainerSrv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers")
	ret0, _ := ret[0].(ContainerSrv)
	return ret0
}

// Containers indicates an expected call of Containers.
func (mr *MockServiceMockRecorder) Containers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockService)(nil).Containers))
}

// Images mocks base method.
func (m *MockService) Images() ImageSrv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images")
	ret0, _ := ret[0].(ImageSrv)
	return ret0
}

// Images indicates an expected call of Images.
func (mr *MockServiceMockRecorder) Images() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockService)(nil).Images))
}

// MockImageSrv is a mock of ImageSrv interface.
type MockImageSrv struct {
	ctrl     *gomock.Controller
	recorder *MockImageSrvMockRecorder
}

// MockImageSrvMockRecorder is the mock recorder for MockImageSrv.
type MockImageSrvMockRecorder struct {
	mock *MockImageSrv
}

// NewMockImageSrv creates a new mock instance.
func NewMockImageSrv(ctrl *gomock.Controller) *MockImageSrv {
	mock := &MockImageSrv{ctrl: ctrl}
	mock.recorder = &MockImageSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageSrv) EXPECT() *MockImageSrvMockRecorder {
	return m.recorder
}

// AddTag mocks base method.
func (m *MockImageSrv) AddTag(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTag indicates an expected call of AddTag.
func (mr *MockImageSrvMockRecorder) AddTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockImageSrv)(nil).AddTag), arg0, arg1, arg2)
}

// Build mocks base method.
func (m *MockImageSrv) Build(arg0 context.Context, arg1 string, arg2 []string, arg3 io.Reader) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockImageSrvMockRecorder) Build(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockImageSrv)(nil).Build), arg0, arg1, arg2, arg3)
}

// Create mocks base method.
func (m *MockImageSrv) Create(arg0 context.Context, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockImageSrvMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImageSrv)(nil).Create), arg0, arg1)
}

// Inspect mocks base method.
func (m *MockImageSrv) Inspect(arg0 context.Context, arg1 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockImageSrvMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockImageSrv)(nil).Inspect), arg0, arg1)
}

// Push mocks base method.
func (m *MockImageSrv) Push(arg0 context.Context, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockImageSrvMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockImageSrv)(nil).Push), arg0, arg1)
}

// MockContainerSrv is a mock of ContainerSrv interface.
type MockContainerSrv struct {
	ctrl     *gomock.Controller
	recorder *MockContainerSrvMockRecorder
}

// MockContainerSrvMockRecorder is the mock recorder for MockContainerSrv.
type MockContainerSrvMockRecorder struct {
	mock *MockContainerSrv
}

// NewMockContainerSrv creates a new mock instance.
func NewMockContainerSrv(ctrl *gomock.Controller) *MockContainerSrv {
	mock := &MockContainerSrv{ctrl: ctrl}
	mock.recorder = &MockContainerSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerSrv) EXPECT() *MockContainerSrvMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContainerSrv) Create(arg0 context.Context, arg1 string, arg2 Container) (*ContainerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ContainerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContainerSrvMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContainerSrv)(nil).Create), arg0, arg1, arg2)
}

// Fetch mocks base method.
func (m *MockContainerSrv) Fetch(arg0 context.Context, arg1, arg2 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockContainerSrvMockRecorder) Fetch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockContainerSrv)(nil).Fetch), arg0, arg1, arg2)
}

// Kill mocks base method.
func (m *MockContainerSrv) Kill(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kill", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockContainerSrvMockRecorder) Kill(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockContainerSrv)(nil).Kill), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockContainerSrv) Remove(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockContainerSrvMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockContainerSrv)(nil).Remove), arg0, arg1)
}

// Start mocks base method.
func (m *MockContainerSrv) Start(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockContainerSrvMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockContainerSrv)(nil).Start), arg0, arg1)
}

// Stop mocks base method.
func (m *MockContainerSrv) Stop(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockContainerSrvMockRecorder) Stop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockContainerSrv)(nil).Stop), arg0, arg1, arg2)
}

// Upload mocks base method.
func (m *MockContainerSrv) Upload(arg0 context.Context, arg1, arg2 string, arg3 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockContainerSrvMockRecorder) Upload(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockContainerSrv)(nil).Upload), arg0, arg1, arg2, arg3)
}

// Wait mocks base method.
func (m *MockContainerSrv) Wait(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockContainerSrvMockRecorder) Wait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockContainerSrv)(nil).Wait), arg0, arg1)
}
